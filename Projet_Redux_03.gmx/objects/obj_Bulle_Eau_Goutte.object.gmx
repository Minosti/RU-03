<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_EAU_REAL</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variable
grav = 1;
spd = 6;
hspd = 0;
vspd = 0;

v1 = 1;

vdestroyin = 0;
va11 = 0;

vcmd = 0;
vcmg = 0;

if ( x &lt; obj_Joueur.x ){
vcs = -1;
}else{
vcs = 0;
}

vspawnbub = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*///d√©placement
if (place_meeting(x, y+1, obj_Bub))
{
        vspawnbub = 1;
        instance_create (x,y,obj_Bub_geler);
        obj_Bub.vdestuction = 1;
}

if (place_meeting(x+1, y, obj_mur))
{
vcmd = 1;
show_debug_message("a droite");
vcmg = 0;
}
if (place_meeting(x-1, y, obj_mur))
{
vcmd = 0;
vcmg = 1;
show_debug_message("a gauche");
}

    if (vcmd = 1){
       vcs = 1 ;
    }
    
    if (vcmg = 1){
    show_debug_message('fuck');
        vcs = -1      
    }
    
    if ( vcs = 1 ){
    show_debug_message('vcs1');
        rkey = false;
        lkey = true; 
    } 
    if ( vcs = -1){
        show_debug_message('vcs-1');
        rkey = true;
        lkey = false; 
    }
    if ( vcs = 0){
        show_debug_message('vcs0');
        if (x-xprevious &lt;= 0){
            rkey = false;
            lkey = true; 
        }else {
            rkey = true;
            lkey = false; 
        }
    }
    
// Check the ground 
if (place_meeting(x, y+1, obj_pladur)){
    vspd = 0;
  
} else {
    // Gravity 
    vgr = 1; 
}
if (place_meeting(x, y+1, obj_pladur1)){
    vspd = 0;
 
} else {
    vgr = 1;
}
if (place_meeting(x, y+1, obj_pladur2)){
    vspd = 0;  
    
} else {
    vgr = 1;  
}
if (place_meeting(x, y+1, obj_pladur3)){
    vspd = 0;  
    
} else {
    vgr = 1;  
}
if (place_meeting(x, y+1, obj_pladur4)){
    vspd = 0;  
    
} else {
    vgr = 1;  
}
if (place_meeting(x, y+1, obj_pladur5)){
    vspd = 0;  
    
} else {
    vgr = 1;  
}
if (vgr &gt; 0){
    // Gravity 
    if ( vspd &lt; 10 ) {
        vspd += grav;
    }
    vrg = 0;
}   

//Moving right 
if (rkey){ 
    hspd = spd;
}

//Moving left 
if (lkey){ 
    hspd = -spd;
}

// check for not moving 
if((!rkey &amp;&amp; !lkey ) || ( rkey &amp;&amp; lkey )) {
    hspd = 0;
}

// Horizontal collisions sol
    if ( place_meeting( x+hspd, y, obj_pladur )) {
        while (!place_meeting( x+sign(hspd), y, obj_pladur)) {
            x += sign(hspd);
        }
        hspd=0;
    }
    
    // Horizontal collisions 1 ere ligne
    if ( place_meeting( x+hspd, y, obj_pladur1 )) {
        while (!place_meeting( x+sign(hspd), y, obj_pladur1)) {
            x += sign(hspd);
        }
        hspd=0;
    }
    
    // Horizontal collisions 2 eme ligne
    if ( place_meeting( x+hspd, y, obj_pladur2 )) {
        while (!place_meeting( x+sign(hspd), y, obj_pladur2)) {
            x += sign(hspd);
        }
        hspd=0;
    }
     // Horizontal collisions 2 eme ligne
    if ( place_meeting( x+hspd, y, obj_pladur3 )) {
        while (!place_meeting( x+sign(hspd), y, obj_pladur3)) {
            x += sign(hspd);
        }
        hspd=0;
    }
     // Horizontal collisions 2 eme ligne
    if ( place_meeting( x+hspd, y, obj_pladur4 )) {
        while (!place_meeting( x+sign(hspd), y, obj_pladur4)) {
            x += sign(hspd);
        }
        hspd=0;
    }
     // Horizontal collisions 2 eme ligne
    if ( place_meeting( x+hspd, y, obj_pladur5 )) {
        while (!place_meeting( x+sign(hspd), y, obj_pladur5)) {
            x += sign(hspd);
        }
        hspd=0;
    }
      // Horizontal collisions bord 
    if ( place_meeting( x+hspd, y, obj_mur )) {
        while (!place_meeting( x+sign(hspd), y, obj_mur)) {
            x += sign(hspd);
        }
        hspd=0;
    }

// Move horizontally 
x += hspd;

// Vertical collisions
  if ( place_meeting( x, y+vspd, obj_pladur1 )) {
        while (!place_meeting( x, y+sign(vspd), obj_pladur1)) {
            y +=sign(vspd);
        }
        vspd=0;
  }
  

  // Vertical collisions
  if ( place_meeting( x, y+vspd, obj_pladur2 )) {
        while (!place_meeting( x, y+sign(vspd), obj_pladur2)) {
            y +=sign(vspd);
        }
        vspd=0;
  }
  // Vertical collisions
  if ( place_meeting( x, y+vspd, obj_pladur3 )) {
        while (!place_meeting( x, y+sign(vspd), obj_pladur3)) {
            y +=sign(vspd);
        }
        vspd=0;
  }
  // Vertical collisions
  if ( place_meeting( x, y+vspd, obj_pladur4 )) {
        while (!place_meeting( x, y+sign(vspd), obj_pladur4)) {
            y +=sign(vspd);
        }
        vspd=0;
  }
  // Vertical collisions
  if ( place_meeting( x, y+vspd, obj_pladur5 )) {
        while (!place_meeting( x, y+sign(vspd), obj_pladur5)) {
            y +=sign(vspd);
        }
        vspd=0;
  }
  
  // Vertical collisions
  if ( place_meeting( x, y+vspd, obj_pladur )) {
        while (!place_meeting( x, y+sign(vspd), obj_pladur)) {
            y +=sign(vspd);
        }
        vspd=0;
  }
  // Vertical collisions mur
    if ( place_meeting( x, y+vspd, obj_mur )) {
        while (!place_meeting( x, y+sign(vspd), obj_mur)) {
            y +=sign(vspd);
        }
        vspd=0;
  }
  
// Move vertically
y += vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
