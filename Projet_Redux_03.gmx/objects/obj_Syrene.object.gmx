<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_Syrene</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variable + IA Mouvement V
randomize();

vtptrue = true;

vtimerstopcol = 0;
vstopcol = false;

grav = 1;
spd = 3;
jspd = 10;
hspd = 0;
vspd = 0;

vt1 = 0;
vt2 = 0;
vt3 = 0;
vt4 = 0;
vt5 = 0;
vt6 = 0;
vt7 = 0;
vt8 = 0;
vt12 = 0;

vdestroyin = 0;
va11 = 0;

vcmd =0;
vcmg =0;
vcs = 0;

vtj = 30;

vvx = 0;
vx = 0;

vdj = 0;
vtd = 30;

vtimerbuster = 0;
timerAttitude = 30;

vpsprite = 0;
// variable IA mouvement

    //random
    randomize();
    vrand = 0;
  
    //timer ( selection des comportement)
    vtimer = 0
    
    // Choix Comportement
    vcc = 0
    
    // Distance entre le buster et le joueur ( en X et Y)
    vppx = 0;
    
    vppy = 0;
    
    //variable de mouvement 
    
    jkey = false;
    dkey = false;
    rkey = false;
    lkey = false;
    
    // variable de changement de sens
    vcs = 0;
    
    // variable restrein le dkey/jkey 
    vtimerdkey = 0;
    vtimerjkey = 0;
    // variable permettent le dkey/jkey 10 step
    vdkey = 0;
    vjkey = 0;
    
    // variable tire 
    
    // Variable du tire 
    vshotsto = false;
    // variable du timer Shot Stoner
    vtimerss = 0;
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variable Etats

Bubbled = 0;
NRV = 0
Mort = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dégats du personnage
DegatCollision = instance_create(x, y, obj_Degat);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variable Bubbled
lifeTimer = 300;
jumpTimer = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>Bubbled</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IA Réflexion mouvement 

// Check de la position du joueur 
    // VPositionPlayerx Positif : Joueur a GAUCHE du buster 
    // VPositionPlayerx Negatif : Joueur a DROITE du buster 
        vppx = x-obj_Joueur.x;

    // VPositionPlayery Positif : Joueur en HAUT du buster 
    // VPositionPlayery Negatif : Joueur en BAS du buster 
        vppy = y-obj_Joueur.y
    
// choix du deplacement 

    // VariableRandom  
     vrand = irandom_range(0,3);
   
   //test vrand = 0
   // vrand = 0;
   //test vrand = 1
   // vrand = 1;
   //test vrand = 2
    //vrand = 2;
   
    // fonction du random il prend un comportement 
    //et de la VariableTimer qui permet de garder un comportement quelques steps
    
    vtimer--; // decrementation de la VariableTimer
    //show_debug_message(vtimer);
if ( vrand = 0 &amp;&amp; vtimer &lt;= 0)
{
    vcc = 1;
    vtimer = 60;
    //show_debug_message("comportement 1");
}
if ( vrand = 1 &amp;&amp; vtimer &lt;= 0)
{
    vcc = 2;
    vtimer = 60;
    //show_debug_message("comportement 2");
}
if ( vrand = 2 &amp;&amp; vtimer &lt;= 0)
{
    vcc = 3;
    vtimer = 10;
    //show_debug_message("comportement 3");
}
if ( vrand = 3 &amp;&amp; vtimer &lt;= 0)
{
    vcc = 4;
    vtimer = 5;
    //show_debug_message("comportement 4");
}

// si le buster n'est pas sur la meme ligne que le joueur il ne doit pas avoir le comportement 3
    if (((vppy &gt; 8) &amp;&amp; (vppy &lt; -8))&amp;&amp; vcc = 3) 
    {
        vcc = 1; 
    }
    
// Deplacement 

    // VaribaleChangementComportement 1 : au plus court 
if ( vcc = 1 )
{    
        if (vppx &lt; vppy)
        {
            if ( vppx &lt; 0)
            {
                rkey = true;
                lkey = false;
                dkey = false;
                jkey = false;
            }else
            {
                rkey = false;
                lkey = true;
                dkey = false;
                jkey = false;
            }
        }else
        {
            if ( vppy &lt; 0)
            {
                rkey = false;
                lkey = false;
                dkey = true;
                jkey = false;
            }else
            {
                rkey = false;
                lkey = false;
                dkey = false;
                jkey = true;
            } 
        }
    if ((vppx &lt; 8) &amp;&amp; (vppx &gt; -8))
    {
        rkey = false;
        lkey = false;
        if (vppy &lt; 0)
        {
            dkey = true;
            jkey = false;
        }else
        {
            dkey = false;
            jkey = true;
        }
    }
    
    if ((vppy &lt; 8) &amp;&amp; (vppy &gt; -8))
    {
        dkey = false;
        jkey = false;
        if (vppx &lt; 0)
        {
            rkey = true;
            lkey = false;
        }else
        {
            rkey = false;
            lkey = true;
        }
    }
}
    
     // VaribaleChangementComportement 2: au plus long
if ( vcc = 2 )
{  
        if (vppx &lt; vppy)
        {
            if ( vppy &lt; 0)
            {
                rkey = false;
                lkey = false;
                dkey = true;
                jkey = false;
            }else
            {
                rkey = false;
                lkey = false;
                dkey = false;
                jkey = true;
            }
           
        }else
        {
            if ( vppx &lt; 0)
            {
                rkey = true;
                lkey = false;
                dkey = false;
                jkey = false;
            }else
            {
                rkey = false;
                lkey = true;
                dkey = false;
                jkey = false;
            }
        
        }
        
     if ((vppx &lt; 8) &amp;&amp; (vppx &gt; -8))
    {
        rkey = false;
        lkey = false;
        if (vppy &lt; 0)
        {
            dkey = true;
            jkey = false;
        }else
        {
            dkey = false;
            jkey = true;
        }
    }
    
    if ((vppy &lt; 8) &amp;&amp; (vppy &gt; -8))
    {
        dkey = false;
        jkey = false;
        if (vppx &lt; 0)
        {
            rkey = true;
            lkey = false;
        }else
        {
            rkey = false;
            lkey = true;
        }
    } 
}
 
    // VaribaleChangementComportement 3: patrouille (quand le joueur est sur la meme plateforme)
if ((vppy &gt; 8) &amp;&amp; (vppy &lt; -8))
if ( vcc = 3 )
{       
    if ((vppy &lt; 8) &amp;&amp; (vppy &gt; -8))
    {
        if (vcs = 0)
        {
            rkey = true;
            lkey = false;
        }else
        {
            rkey = false;
            lkey = true;
        }
    }
    
        
            if ((!place_meeting(x+8, y+8, obj_Block_Base)) &amp;&amp; (y &lt; 184))
            {
                //show_debug_message("place meeting block rkey = true ");           
                rkey = false;
                lkey = true;
                dkey = false;
                jkey = false;
                vcs = 1;
            }
            
            if (place_meeting(x+8, y, obj_Block_Base))
            {
                //show_debug_message("rkey = true et place meeting block a droite");
                rkey = false;
                lkey = true;
                dkey = false;
                jkey = false;
                vcs = 1;
            }
        
        
            if ((!place_meeting(x-8, y+8, obj_Block_Base)) &amp;&amp; (y &lt; 184))
            {
                //show_debug_message("place meeting block lkey = true ");
                rkey = true;
                lkey = false;
                dkey = false;
                jkey = false;
                vcs = 0;
            }  
            
            if (place_meeting(x-8, y, obj_block_lvl_01))
            {
                //show_debug_message("lkey = true et place meeting block a gauche");
                rkey = true;
                lkey = false;
                dkey = false;
                jkey = false;
                vcs = 0;
            }
            
}
//show_debug_message("rkey");
//show_debug_message(rkey);
//show_debug_message("lkey");
//show_debug_message(lkey);
//show_debug_message("dkey");
//show_debug_message(dkey);
//show_debug_message("jkey");
//show_debug_message(jkey);

    // VaribaleChangementComportement 4: immobile
if ( vcc = 4 || vcc = 0)
{ 
        rkey = false; 
        lkey = false;
        dkey = false;
        jkey = false;
}

// Gestion de saut
vtimerdkey--;
vdkey--;
if ((dkey = true) &amp;&amp; (vtimerdkey &lt;= 0))
{
    dkey = true;
    vtimerdkey = 40 //Doublé
    vdkey = 6;
}else 
{
   dkey = false;
}

if (vdkey &gt; 0)
{
    dkey = true;
}  
vtimerjkey--;
vjkey--;
if ((jkey = true) &amp;&amp; (vtimerjkey &lt;= 0))
{
    jkey = true;
    vtimerjkey = 35 // Doublé
    vjkey = 6;
}else 
{
   jkey = false;
}

if (vjkey &gt; 0)
{
    jkey = true;
}  
/*show_debug_message("dkey");
show_debug_message(dkey);
*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IA Déplacement

if (vtimerstopcol = 0)
{
    vstopcol = false;
    vtimerstopcol = 6;
}

if (vstopcol = true)
{
    vtimerstopcol--;
}

if place_meeting(x ,y-1, obj_Block_Base)
{
    vstopcol = true;
    //show_debug_message("True !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
   
}


if (jkey)
{
    vspd = -jspd;
}

   // Gravity
   
if (vspd &lt; 10)
{
    vspd += grav;
}

//Moving right
 
if (rkey){ 
    hspd = spd;
    self.image_xscale = -1;
}

//Moving left 

if (lkey){ 
    hspd = -spd;
    self.image_xscale = 1;
}

// check for not moving 
if((!rkey &amp;&amp; !lkey ) || ( rkey &amp;&amp; lkey )) {
    hspd = 0;
}

//horizontal collisions

if (place_meeting(x+hspd, y, obj_Block_Base))
{
    while (!place_meeting(x+sign(hspd), y, obj_Block_Base))
        {
            x+= sign(hspd);
        }
     hspd = 0;
}

// Move horizontally 
x += hspd;

if( dkey = false){
    if (vstopcol = false)
    {
        //vertical collisions | direction du vspd | Ne rencontre pas un mur par en dessous
        
        if (place_meeting(x, y+vspd,obj_Block_Base))
        {
            while (!place_meeting(x, y+sign(vspd), obj_Block_Base))
            {
                y += sign(vspd);
            }
            vspd = 0;
        }
    }
}

// Move vertically

y += vspd;


if (va11 = 1) {
alarm[6] = 5;
va11 = 0;
}

if (vdestroyin = 1) {instance_destroy()}



// Wrap Ennemis
if (place_meeting(x, y+1, obj_plat_teleportation_Red))
    {
    self.y = 0;
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shot


/// Tire

// a titre indicatif : ça ce fait dans le Script :IA mouvement 
    // Check de la position du joueur 
        // VPositionPlayerx Positif : Joueur a GAUCHE du buster 
        // VPositionPlayerx Negatif : Joueur a DROITE du buster 
            //vppx = x-obj_Bub_test.x;
    
        // VPositionPlayery Positif : Joueur en HAUT du buster 
        // VPositionPlayery Negatif : Joueur en BAS du buster 
            //vppy = y-obj_Bub_test.y;
    
// condition du tire et initialisation de la valeur  

vtimerss--;

if (((vppy &lt; 16) &amp;&amp; (vppy &gt; -16)) &amp;&amp; ((vppx &lt; 256) &amp;&amp; (vppx &gt; -256))) 
{
    if (vtimerss &lt;= 0 )
    {
        vshotsto = true;
        vtimerss = 60;
    }
}

if ( vshotsto = true) 
{
     instance_create(x,y, obj_Syrene_shot);
}

vshotsto = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dégats suivit
if instance_exists(obj_Degat)
        {
        //Déplacement Aspiration Collision
        DegatCollision.x = x;
        DegatCollision.y = y;
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>Bubbled</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vitesse et Durée de Vie

hspeed = 0;
vspeed = -1;

//Timer : Durée de vie
lifeTimer -= 1;

//Timer : Temps de saut avant éclatement
if ((place_meeting(x, y-1,obj_Joueur)))
{ 
jumpTimer -= 1;
}else{
jumpTimer = 2;
}

if (lifeTimer == 125)
{
    self.sprite_index=spr_ENM_Buster_Bubbled_END;
}

//Destruction bulle si les timers sont dépassé
if (lifeTimer == 0) 
{
    lifeTimer = 300;
    DegatCollision = instance_create(x, y, obj_Degat);
    NRV = 1;
    Bubbled = 0;
    
}

if (jumpTimer == 0)
{
    instance_create(x, y, obj_ENM_PF_Dead);
    score += 1000;
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Joueur or Artefact special

//Joueur
if place_meeting(x, y, obj_Joueur)
{
 instance_create(x, y, obj_ENM_PF_Dead);
 instance_destroy();
}

//Artefact spécial
if place_meeting(x, y, obj_Fire) 
|| place_meeting(x, y, obj_FireFall) 
|| place_meeting(x, y, obj_FireFall_Special)
|| place_meeting(x, y, obj_Eclair_Bouclier)
|| place_meeting(x, y, obj_Eclair)
{ 
 instance_create(x, y, obj_AmePure);
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>NRV</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Changement variable &amp; Sprite
if (Bubbled = 0)
{
self.sprite_index=spr_ENM_Buster_Walk_NRV;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Bulle Spécial

if place_meeting(x, y, obj_Fire) 
|| place_meeting(x, y, obj_FireFall) 
|| place_meeting(x, y, obj_FireFall_Special)
|| place_meeting(x, y, obj_Eclair_Bouclier)
|| place_meeting(x, y, obj_Eclair)

{ 
            //Kill to âme pure

//Destroy Collision Dégat ennemis
with (DegatCollision)
{
    instance_destroy();
} 
//Destroy ennemis
instance_create(x, y, obj_AmePure);
instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Bulle_Tir">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Embulé
///Collision Bulle
with (DegatCollision)
{
    instance_destroy();
}

show_debug_message("Touché");
self.sprite_index=spr_ENM_Buster_Bubbled;
Bubbled = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Joueur">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (CooldownDashMode = 1)
{
with (DegatCollision)
{
    instance_destroy();
}
instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
